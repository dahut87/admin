#!/bin/bash
CURRENT=$(cd `dirname $0` && pwd)
DIRECTORY="/root/"
source "$DIRECTORY/assets/config"
ALLSTR=""
ALLARGS="$@"

upgrade()
{
	show "Upgrade admin command" 1
	wget --no-cache "https://raw.githubusercontent.com/dahut87/admin/master/admin" -O /tmp/admin &> /dev/null
	if [ "$?" == 0 ]; then
		show "Download ok"
	else
		show "Error on download" ERR
		exit
	fi
	show "Compare version" 1
	current=$(sha1sum /bin/admin|cut -d" " -f1)
	next=$(sha1sum /tmp/admin|cut -d" " -f1)
	show "Current: $current"
	show "Last   : $next" 
	if [ "$current" != "$next" ]; then
		echo "Version are differents"
		show "Copying new admin command" 1
		cp /tmp/admin /bin/admin
		exit
	else
		show "You are using latest version" 1
	fi	
}

volconfig()
{
	if [ -z "$1" ]; then
		return
	fi
	id=1
	allvol=""
	while read vol; do
		mount=$(basename "$vol")
		allvol="$allvol--mp$id $vol,mp=/srv/$mount "
		id=$((id+1))
	done < <(echo "$1"|tr "," "\n")
	echo "$allvol"
}

getnets()
{
	nets=""
	while read net; do
		min="${net,,}"
		nets="$nets${min:0:1}"
	done < <(echo "$net_ALL"|tr "," "\n")
	echo "$nets"
}

getnetsopt()
{
	nets=""
	while read net; do
		min="${net,,}"
		nets="$nets[${min:0:1}]"
	done < <(echo "$net_ALL"|tr "," "\n")
	echo "$nets"
}

findnet()
{
	while read net; do
		if [[ "${net,,}" == "$1"* ]]; then	
			echo "${net}"
			return
		fi
	done < <(echo "$net_ALL"|tr "," "\n")
	
}

findnetbyip()
{
	prefix=$(echo "$1"|cut -d"." -f1-3)
	while read net; do
		allrange="echo \$net${net^}_prefix"
		range=$(eval "$allrange")
		if [ "$range" == "$prefix" ]; then
			echo $net	
			return
		fi
	done < <(getnets|fold -w1)
	echo "NO"
}

shownetconfig()
{
	string="SHORT NAME|NAME|NETWORK|DOMAIN|VLAN|GATEWAY|BRIDGE\n"
	while read net; do
		realnet=$(findnet $net)
		allrange="echo \$net${net^}_prefix"
		range=$(eval "$allrange")
		allcidr="echo \$net${net^}_cidr"
		cidr=$(eval "$allcidr")
		alltag="echo \$net${net^}_tag"
		tag=$(eval "$alltag")
		allgw="echo \$net${net^}_gw"
		gw=$(eval "$allgw")
		allbr="echo \$net${net^}_br"
		br=$(eval "$allbr")
		allsearch="echo \$net${net^}_search"
		search=$(eval "$allsearch")
		string="$string\n$net|$realnet|$range/$cidr|$search|$tag|$gw|$br"
	done < <(getnets|fold -w1)
	echo -en "$string"|column -s "|" -t
}

getsearchdomain()
{
	mini=${net_ALL,,} 
	net=${mini:0:1} 
	allsearch="echo \$net${net^}_search"
	search=$(eval "$allsearch")
	echo "$search"
}

netconfig()
{	
	allnet=""
	id=0
	if [ "$1" == "" ]; then
		mini=${net_ALL,,} 
		nets=${mini:0:1} 
	else
		nets=${1,,} 
	fi
	while read net; do
		realnet=$(findnet $net)
		allrange="echo \$net${net^}_prefix"
		range=$(eval "$allrange")
		allcidr="echo \$net${net^}_cidr"
		cidr=$(eval "$allcidr")
		alltag="echo \$net${net^}_tag"
		tag=$(eval "$alltag")
		allgw="echo \$net${net^}_gw"
		gw=$(eval "$allgw")
		allbr="echo \$net${net^}_br"
		br=$(eval "$allbr")
		allsearch="echo \$net${net^}_search"
		search=$(eval "$allsearch")
		if [[ "$nets" == *"$net"* ]]; then
			echo $(findfreeip $range $2)
			ip=$(findfreeip $range $2)
			if [ "$tag" != "no" ]; then
				fulltag=",tag=$tag"
			else
				fulltag=""	
			fi
			if [ "$gw" != "no" ]; then
				fullgw=",gw=$range.$gw"
			else
				fullgw=""	
			fi
			if [ "$tag" != "no" ]; then
				num="$tag"
			else
				num="0"	
			fi
 			allnet="$allnet--net$id name=eth$num,bridge=$br$fulltag,firewall=0,ip=$ip/$cidr$fullgw,type=veth "
		id=$((id+1))
		fi
	done < <(getnets|fold -w1)
	echo "$allnet"
}

win()
{
	if [ -f "/usr/bin/aplay" ]; then
        	/usr/bin/aplay "$DIRECTORY/assets/end.wav" --device plughw:CARD=UACDemoV10,DEV=0 &> /dev/null
	else
       		beep -f 130 -l 100 -n -f 262 -l 100 -n -f 330 -l 100 -n -f 392 -l 100 -n -f 523 -l 100 -n -f 660 -l 100 -n -f 784 -l 300 -n -f 660 -l 300 -n -f 146 -l 100 -n -f 262 -l 100 -n -f 311 -l 100 -n -f 415 -l 100 -n -f 523 -l 100 -n -f 622 -l 100 -n -f 831 -l 300 -n -f 622 -l 300 -n -f 155 -l 100 -n -f 294 -l 100 -n -f 349 -l 100 -n -f 466 -l 100 -n -f 588 -l 100 -n -f 699 -l 100 -n -f 933 -l 300 -n -f 933 -l 100 -n -f 933 -l 100 -n -f 933 -l 100 -n -f 1047 -l 400
	fi
}

ok()
{
	if [ -f "/usr/bin/aplay" ]; then
        	/usr/bin/aplay "$DIRECTORY/assets/ok.wav" --device plughw:CARD=UACDemoV10,DEV=0 &> /dev/null
	else
       		beep -f40 -l100
	fi
}

alert()
{
	if [ -f "/usr/bin/aplay" ]; then
        	/usr/bin/aplay "$DIRECTORY/assets/alert.wav" --device plughw:CARD=UACDemoV10,DEV=0 &> /dev/null
	else
		for n in 1 2 3 4 5 6 7 8 9 0; do
      			for f in 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600; do
        			beep -f $f -l 20
      			done
		done
	fi
}

wrong()
{
	if [ -f "/usr/bin/aplay" ]; then
        	/usr/bin/aplay "$DIRECTORY/assets/wrong.wav" --device plughw:CARD=UACDemoV10,DEV=0 &> /dev/null
	else
       		beep -f90 -l300 
	fi
}

install()
{
	show "Install required packages" 1
	apt install -y tree xxd bsdmainutils mime-construct s-nail htop libusb-1.0-0 beep lsscsi binutils-common binutils patch hddtemp lm-sensors xattr tmux pv jq net-tools figlet rclone sanoid zstd
	read -p "Do you want to use an AC/DC inverter ? [y/n] " answer
	if [ "$answer" == "y" ]; then
		apt install -y nut-client nut-server
	fi
	read -p "Do you want to use sound card ? [y/n] " answer
	if [ "$answer" == "y" ]; then
		apt install -y alsa-utils
	fi
	show "Install generic hookscript" 1
	mkdir -p /var/lib/vz/snippets
	cp $DIRECTORY/assets/hookscript.pl /var/lib/vz/snippets/
	show "copying admin to /bin" 1
	mv "$CURRENT/admin" /bin/admin
	show "copying assets to /root" 1
	mv "$CURRENT/assets" /root/assets
	show "Installation OK, relaunch"
	exit
}

ctunprivilege()
{
	show "Migrate container to unprivileged" 1
	if [ "$1" == "" ]; then
		show "Need an container ID" ERR
		exit
	fi
	id="$1"
	volume="vol-$id"
	zfscreate $volume
	show "Stopping container $id" 1
	pct stop $id
	show "Backup container $id" 1
	vzdump $id --compress zstd --mode snapshot --storage local --notes-template {{guestname}}
	name=$(cat /etc/pve/lxc/$id.conf |grep "hostname"|sed 's/hostname: //g')
	show "Copying files to new volume" 1
	if [ -d "$servermount/$name" ]; then
		show "$servermount/$name => $servermount/$volume"
        	cp -a $servermount/$name/* $servermount/$volume
		chown -R 100000:100000 $servermount/$volume
	else
		show "No old volume"
	fi
	vol=$(cat "/etc/pve/lxc/$id.conf"|grep rootfs|sed 's/rootfs:[^:]*\([^,]*\):/\1/g'|cut -d"," -f1)
        subvol="rpool/data/$vol"
	zfs mount $subvol
	echo "Subvolume: $subvol"
	show "Checking Docker..."
	if [ -f "/$subvol/usr/bin/docker-compose" ]; then
		show "Docker installed, recreating container"
		show "Backup configuration file" 1
		cp /etc/pve/local/lxc/$id.conf $servermount/$name/old.conf
		show "Retrieving all configuration from file" 1
		config=$(cat "/etc/pve/lxc/$id.conf")
		core=$(echo "$config"|grep cores|sed 's/cores: //g')
		mem=$(echo "$config"|grep memory|sed 's/memory: //g')
		onboot=$(echo "$config"|grep onboot|sed 's/onboot: //g')
		startup=$(echo "$config"|grep startup|sed 's/startup: order=//g')
		vol=$(echo "$config"|grep rootfs|sed 's/.*size=\([0-9]*\)G/\1/')
		nets=""
		ips=""
		while read ip; do
			prefix=$(findnetbyip $ip)
			if [ "$prefix" != "NO" ]; then
				nets="${nets}$prefix"
				ips="${ips}$ip,"
			fi
		done < <(echo "$config"|grep "^net"|sed 's/^.*,ip=\([0-9.]*\)\/.*$/\1/g')
		if [ "$onboot" == "1" ]; then
			fullboot="-B"
		else
			fullboot=""
		fi
		if [ "$startup" == "" ]; then
			startup="30"
		fi
		if [ "$startup" == " " ]; then
			startup="30"
		fi
		show "Deleting previous container" 1
		echo ""|ctdelete -i $id -y 
		show "Creating new unprivileged container" 1
		show "ctcreate -i $id -N $nets -n $name -c $core -m $mem $fullboot -d -o alpine -v $vol -b $startup -I $ips"
		ctcreate -i $id -N $nets -n $name -c $core -m $mem $fullboot -d -o alpine -v $vol -b $startup -I $ips
	else
		show "no Docker, partially migrate"
		show "chowning files, sockets and pipes" 1
		find /$subvol -type f -or -type s -or -type p | while read S; do U="$(ls -ln "${S}" | awk '{print$3}')"; G="$(ls -ln "${S}" | awk '{print$4}')"; F=100000; chown "${F:0: -${#U}}${U}:${F:0: -${#G}}${G}" "${S}"; done
		show "chowning symlinks" 1
		find /$subvol -type l | while read S; do U="$(ls -ln "${S}" | awk '{print$3}')"; G="$(ls -ln "${S}" | awk '{print$4}')"; F=100000; chown -h "${F:0: -${#U}}${U}:${F:0: -${#G}}${G}" "${S}"; done
		show "chowning directores" 1
		find /$subvol -type d | while read S; do U="$(ls -lnd "${S}" | awk '{print$3}')"; G="$(ls -lnd "${S}" | awk '{print$4}')"; F=100000; chown "${F:0: -${#U}}${U}:${F:0: -${#G}}${G}" "${S}"; done
		show "fixing postfix if necessary" 1
		[ -e /$subvol/var/spool/postfix/dev/-random ] && rm -ri /$subvol/var/spool/postfix/dev/-random
		[ -e /$subvol/var/spool/postfix/dev/-urandom ] && rm -ri /$subvol/var/spool/postfix/dev/-urandom
		show "setting suid on sudo" 1
		[ -e /$subvol/usr/bin/sudo ] && chmod u+s /$subvol/usr/bin/sudo
	fi
}

show()
{	
	NC='\033[0m'
	if [ -z "$2" ]; then
		COLOR=$NC
	elif [ "$2" == "ERR" ]; then
		COLOR='\033[1;31m'
	else
		COLOR='\033[0;32m'
	fi
	printf "${COLOR}$1${NC}\n"
	ALLSTR="$ALLSTR$1\n"
}

nfcunmount()
{
	tmpfs=$(mount|grep tmpfs|grep "/mnt/usb")
	if [ ! -z "$tmpfs" ]; then
       		show "Umount tmpfs on /mnt/usb" 1
        	umount /mnt/usb
	fi
	tmpfs=$(mount|grep tmpfs|grep "/mnt/usb")
	if [ ! -z "$tmpfs" ]; then
        	show "Unable to umount" ERR
	fi
}

nfcreadraw()
{
	nfcmountonly
	rm -rf /mnt/usb/temp
	nfc-mfclassic r a u /mnt/usb/temp
	value=$(cat /mnt/usb/temp)
	if [ ! -z "$value" ]; then
		ok
	else
		wrong
		show "No data" ERR
		nfcunmount
		exit
	fi
	hexdump -C /mnt/usb/temp
	rm -rf /mnt/usb/temp
	nfcunmount
}

nfcread()
{
	nfcmountonly
	rm -rf /mnt/usb/temp
	mifare-classic-read-ndef -y -o -|/usr/local/bin/ndeftool load - save /mnt/usb/temp
	value=$(cat /mnt/usb/temp)
	if [ ! -z "$value" ]; then
		ok
	else
		wrong
		show "No data" ERR
		nfcunmount
		exit
	fi
	cat /mnt/usb/temp|/usr/local/bin/ndeftool load - print 2> /dev/null
	rm -rf /mnt/usb/temp
	nfcunmount
}

nfcmountonly()
{
	if [ ! -d /mnt/usb ]; then
        	show "Create /mnt/usb" 1
        	mkdir -p /mnt/usb
	fi
	tmpfs=$(mount|grep tmpfs|grep "/mnt/usb")
	if [ -z "$tmpfs" ]; then
        	show "Mount tmpfs on /mnt/usb" 1
        	mount -t tmpfs tmpfs /mnt/usb
	fi
}

nfcmount()
{
        nfcmountonly
        values=$(mifare-classic-read-ndef -y -o -|/usr/local/bin/ndeftool load - print)
        if [ -z "${values}" ]; then
                wrong
                show "No data" ERR
                nfcunmount
                exit
        else
                ok
        fi
        show "Recreating key volumes"
        keys=$(echo "${values}"|sed "s/.*ID '\(key[ 1-9]*\)'.*/\1/g")
        while read -r key;
        do
                value=$(echo "$values"|grep "ID '$key'"|sed "s/NDEF Text Record ID '[^']*' Text '\(.*\)' Language 'en' Encoding 'UTF-8'/\1/g")
                echo "$value" > "/mnt/usb/$key"
        done < <(echo "$keys")
        ls /mnt/usb/key*
}

nfcclear()
{
	mifare-classic-format -y
}

nfccopyraw()
{	
	nfcmountonly
	rm -rf /mnt/usb/temp
	nfc-mfclassic r a u /mnt/usb/temp
	value=$(cat /mnt/usb/temp)
	if [ ! -z "$value" ]; then
		ok
	else
		wrong
		show "No data" ERR
		nfcunmount
		exit
	fi
	hexdump -C /mnt/usb/temp|head -10
	show "<<< CHANGE NFC CARD & PRESS A KEY TO COPY >>>" 1
	read
	nfc-mfclassic w a u /mnt/usb/temp
	rm -rf /mnt/usb/temp	
	nfcunmount
}	

nfccopy()
{	
	nfcmountonly
	rm -rf /mnt/usb/temp
	mifare-classic-read-ndef -y -o -|/usr/local/bin/ndeftool load - save /mnt/usb/
	value=$(cat /mnt/usb/temp)
	if [ ! -z "$value" ]; then
		ok
	else
		wrong
		show "No data" ERR
		nfcunmount
		exit
	fi
	hexdump -C /mnt/usb/temp|head -10
	show "<<< CHANGE NFC CARD & PRESS A KEY TO COPY >>>" 1
	read
	mifare-classic-write-ndef -y -i /mnt/usb/temp
	rm -rf /mnt/usb/temp	
	nfcunmount
}	

nfcdelkey()
{
	if [ -z "$1" ]; then
		show "Usage: admin nfcdelkey keyX" 1
		show ""
		show "Delete a key on NFC tag"
		exit
	fi
	verify=$(echo "$1"|sed -n 's/^\(key[0-9]\+\)$/\1/p'|grep "key")
	if [ -z "$verify" ]; then
		show "Bad argument, need a keyX key" ERR
		exit
	fi
	enr=$(mifare-classic-read-ndef -y -o -|/usr/local/bin/ndeftool load - print|grep "key")
	verify=$(echo -en "$enr"|grep "$1")
	if [ -z "$verify" ]; then
		show "Key '$1' not exist" ERR
		exit
	else
		enr=$(echo "$enr\n"|grep -v "ID '$1'")
		nfcmake "$enr"
	fi
}

nfcaddkey()
{
	if [ -z "$1" ]; then
		show "Usage: admin nfcaddkey keyX,keyvalue" 1
		show ""
		show "Add a key on NFC tag"
		exit
	fi
	verify=$(echo "$1"|sed -n 's/^\(key[0-9]\+\)$/\1/p'|grep "key")
	if [ -z "$verify" ]; then
		show "Bad argument, need a keyX key" ERR
		exit
	fi
	enr=$(mifare-classic-read-ndef -y -o -|/usr/local/bin/ndeftool load - print|grep "key")
	verify=$(echo -en "$enr"|grep "$1")
	if [ ! -z "$verify" ]; then
		show "Key '$1' already exist" ERR
		exit
	else
		enr=$(echo "$enr"|grep -v "ID '$1'")
		enr="$enr\nNDEF Text Record ID '$1' Text '$2' Language 'en' Encoding 'UTF-8'\n"
		nfcmake "$enr"
	fi
}

nfcmake()
{
	echo -en "$1"
	string="/usr/local/bin/ndeftool"
	while read enr; do
		key=$(echo "${enr}"|sed "s/.*ID '\(key[ 1-9]*\)'.*/\1/g")
		value=$(echo "${enr}"|grep "ID '$key'"|sed "s/NDEF Text Record ID '[^']*' Text '\(.*\)' Language 'en' Encoding 'UTF-8'/\1/g")
		if [ ! -z "$key" ]; then
			if [ ! -z "$value" ]; then
				string="$string text \"$value\" id \"$key\""
			fi
		fi
	done < <(echo -e "$1")
	show "Show key data" 1
	bash -c "$string print"
	show "Write key data to temp" 1
	bash -c "$string save -f /mnt/usb/towrite"
	show "Write key data to tag" 1
	mifare-classic-write-ndef -y -i /mnt/usb/towrite
	rm -rf /mnt/usb/temp	
	nfcunmount
}

nfcsetkey()
{
	if [ -z "$1" ]; then
		show "Usage: admin nfcsetkey keyX,keyvalue" 1
		show ""
		show "Change a key value on NFC tag"
		exit
	fi
	verify=$(echo "$1"|sed -n 's/^\(key[0-9]\+\)$/\1/p'|grep "key")
	if [ -z "$verify" ]; then
		show "Bad argument, need a keyX key" ERR
		exit
	fi
	enr=$(mifare-classic-read-ndef -y -o -|/usr/local/bin/ndeftool load - print|grep "key")
	verify=$(echo -en "$enr"|grep "$1")
	if [ -z "$verify" ]; then
		show "Key '$1' not exist" ERR
		exit
	else
		enr=$(echo "$enr"|grep -v "ID '$1'")
		enr="$enr\nNDEF Text Record ID '$1' Text '$2' Language 'en' Encoding 'UTF-8'\n"
		nfcmake "$enr"
	fi
}

nfcwrite()
{	
	if [ -z "$1" ]; then
		show "Usage: admin nfcwrite key1,key2,key3,key4..." 1
		show ""
		show "write keys on NFC tag"
		exit
	fi
	nfcmountonly
	rm -rf /mnt/usb/temp
	key=0;	
	string="/usr/local/bin/ndeftool"
	while read value; do
		key=$((key+1))
		#show "key${key}:$value"
		string="$string text \"$value\" id \"key${key}\""
	done < <(echo "$1"|tr "," "\n")
	show "Show key data" 1
	bash -c "$string print"
	show "Write key data to temp" 1
	bash -c "$string save /mnt/usb/temp"
	show "Write key data to tag" 1
	mifare-classic-write-ndef -y -i /mnt/usb/temp
	rm -rf /mnt/usb/temp	
	nfcunmount
}

nfcobfuscate()
{
	nfcmountonly
	rm -rf /mnt/usb/temp
	nfc-mfclassic r a u /mnt/usb/temp
	value=$(cat /mnt/usb/temp)
	if [ ! -z "$value" ]; then
		ok
	else
		wrong
		show "No data" ERR
		nfcunmount
		exit
	fi
	value=$(dd conv=notrunc if=/mnt/usb/temp count=1 bs=1 skip=$((0x43)))
	tohex=$(echo -en "$value"|xxd -p)
	newvalue=$(("0x$tohex"+1))
	hexvalue=$(printf "%x" $newvalue)
	echo "$hexvalue"
	printf "\x$hexvalue" | dd conv=notrunc of=/mnt/usb/temp bs=1 seek=$((0x43))
	hexdump -C /mnt/usb/temp|head -10
	nfc-mfclassic w a u /mnt/usb/temp
	rm -rf /mnt/usb/temp	
	nfcunmount
}

nfcinstall()
{
	show "Copying files to system" 1
	cp $DIRECTORY/assets/service-zfs/zfs-load-keys.service /etc/systemd/system/
	cp $DIRECTORY/assets/service-zfs/zfs-unload-keys.service /etc/systemd/system/
	cp $DIRECTORY/assets/service-zfs/zfs-keys /etc/init.d/
	show "Changing rights" 1
	chmod 644 /etc/systemd/system/zfs-load-keys.service
	chmod 644 /etc/systemd/system/zfs-unload-keys.service
	chmod 755 /etc/init.d/zfs-keys
	show "Enabling services" 1
	systemctl daemon-reload
	systemctl enable zfs-load-keys.service
	systemctl enable zfs-unload-keys.service
	systemctl start zfs-load-keys.service	
	show "Adding packages" 1
	apt install -y libnfc-examples libnfc-bin libfreefare-bin python3-pip
	pip install click==8.0.4
	pip install ndeftool
	show "Configuring nfc reader" 1
	mkdir -p /etc/nfc/devices.d/
	cat <<EOF > /etc/nfc/devices.d/lecteur
name = "Lecteur PN532 MAISON"
connstring = "pn532_uart:/dev/ttyUSB0"
EOF
	cat <<EOF > /etc/nfc/libnfc.conf
allow_autoscan = false
log_level = 0
allow_intrusive_scan = true
allow_autoscan = true
EOF
	show "<< PUT A TAG ON READER TO TEST IT >>"
	show "Test NFC reader : BASE" 1
	nfc-list
	show "Test NFC reader : writing" 1
	nfcwrite key1,key2,key3,key3,alotofkeytoseeifitsoknow
	show "Test NFC reader : reading" 1
	nfcread
	show "Test NFC reader : virtual dir" 1
	nfcmount
	cat /mnt/usb/*
	nfcumount
	show "Start ultimate ZFS key load service" 1
	systemctl start zfs-load-keys.service	
}

nfcuninstall()
{
	show "Disabling services" 1	
	systemctl start zfs-unload-keys.service	
	systemctl disable zfs-load-keys.service
	systemctl disable zfs-unload-keys.service
	systemctl daemon-reload
	show "Delete  files from system" 1
	rm -rf /etc/systemd/system/zfs-load-keys.service
	rm -rf /etc/systemd/system/zfs-unload-keys.service
	rm -rf /etc/init.d/zfs-keys
	show "Removing packages"
	apt remove -y libnfc-examples libnfc-bin libfreefare-bin
	show "Removing reader configuration"
	rm -rf /etc/nfc/
}

nfczfs()
{
	nfcmount
	show "Load zfs keys" 1
	zfs load-key -a
        show "Mount volumes" 1
        zfs mount -a
	nfcunmount
}

rclonemount()
{
	if [ ! -f /mnt/usb/rclone/rclone.conf ]; then
		show "NO RCLONE CONFIGURATION FILE" ERR
		nfcmount
		if [ ! -d /mnt/usb/rclone ]; then
        		show "Create /mnt/usb/rclone" 1
        		mkdir -p /mnt/usb/rclone
		fi
		show "Create rclone.conf" 1
		cat << EOF > /mnt/usb/rclone/rclone.conf
[pcloud]
type = pcloud
hostname = eapi.pcloud.com
token = {"access_token":"%key1%","token_type":"bearer","expiry":"0001-01-01T00:00:00Z"}

[crypt]
type = crypt
remote = pcloud:$1
filename_encryption = standard
directory_name_encryption = true
password = %key2%
password2 = %key3%
EOF
		keys=$(cat /mnt/usb/rclone/rclone.conf|sed 's/.*%\(key[ 1-9]*\)%.*/\1/g'|grep key)
		while read -r key;
		do
   			realkey=$(cat "/mnt/usb/${key}")
   			show "Apply key : $key" 1
   			sed -i "s/%${key}%/${realkey}/g" /mnt/usb/rclone/rclone.conf
		done < <(echo "$keys")
	fi
	show "List remotes" 1
	rclone --config /mnt/usb/rclone/rclone.conf listremotes
	show "Connect to Cloud without cyphering" 1
	rclone --config /mnt/usb/rclone/rclone.conf lsd pcloud:/
	show "Connect to Cloud with cyphering" 1
	rclone --config /mnt/usb/rclone/rclone.conf lsd crypt:/
}

zfsdelete()
{
	show "Deleting subdataset $serverpool/$1"
        if [ ! -z "$1" ]; then
                zfs destroy $serverpool/$1
		rmdir $servermount/$1
        fi
}

zfscreate()
{
	show "Creating subdataset $serverpool/$1 on $servermount/$1" 1
        if [ ! -z "$1" ]; then
		zfs create $serverpool/$1 -o mountpoint=$servermount/$1
		chown 100000:100000 $servermount/$1
	fi
}

lastid()
{
	#show "Getting last ID" 1
	last=$(lxc-ls -1|sort -nr|head -n1)
	echo $((last+1))
}

findfreeip()
{
	if [ "$2" != "" ]; then
		show "Search ip in preferential list" 1
		while read ip; do
			if [[ "$ip" == "$1."* ]]; then
				echo -en "$ip"
				return
			fi
		done < <(echo "$2"|tr "," "\n")	

	fi
	show "Search ip nmap & DNS" 1
	for i in {1..254}; do 
		domain=$(nslookup $1.$i $dns|grep NXDOMAIN)
echo $i
		if [ -z "$domain" ]; then
			show -en "$1.$i"
			exit
		fi	
		nmapper=$(nmap -sP -PR $1.$i|grep "0 hosts up")
		if [ ! -z "$nmapper" ]; then
			echo -en "$1.$i"
			exit
		fi	
	done
}

genname()
{
	#show "Generate animal name" 1
	ad=$(cat "$DIRECTORY/assets/adjectives.json")
	an=$(cat "$DIRECTORY/assets/animals.json")
	ad_len=$(jq length "$DIRECTORY/assets/adjectives.json")
	an_len=$(jq length "$DIRECTORY/assets/animals.json")
	max=$((ad_len-1))
        ele=$(shuf -i 0-$max -n1)
	adjective=$(echo "$ad"|jq ".[$ele]"|sed 's/"//g')
	max=$((an_len-1))
        ele=$(shuf -i 0-$max -n1)
	animal=$(echo "$an"|jq ".[$ele]"|sed 's/"//g')
	show "${adjective}-${animal}"|tr "A-Z" "a-z"
}

help()
{
	show "Usage: admin [ command ] [ args... ] [ *tomail|tosignal ]" 1
	show ""
	show "help for COMPLEX commands: admin command -h"
	show "-< Containers"
	show "ctcreate	- create a container COMPLEX"
	show "ctdelete 	- delete a container COMPLEX":y
	show "ctreinstall	- reinstall container by relauching command 1ARG"
	show "ctunprivilege	- convert privileged to unprivileged container 1ARG"
	show "ctkill		- stop a running container 1ARG"
	show "ctkillall	- stop all containers NOARG"
	show ""
	show "-< VM"
	show "vmkill		- stop a vm 1ARG"
	show ""
	show "-< Disk"
	show "disktemp	- view disk temperatures NOARG"
	show "diskhealth	- view disk health NOARG"
	show ""
	show "-< Admin PVE"
	show "install		- install admin command NOARG"
	show "upgrade		- upgrade admin command NOARG"
	show "rapport		- create HTML report NOARG"
	show "close		- close all temp directory NOARG"
	show "rclone		- sync, check data to cloud 1ARG"
	show "stop		- stop PVE (with VM&CT) NOARG"
	show "start		- start PVE NOARG"
	show "iommugroups	- view iommu configuration NOARG"
	show ""
	show "-< NFC"
	show "nfcinstall	- install nfc service for ZFS cyphering NOARG"
	show "nfcreadraw	- read nfc tag with low level NOARG"
	show "nfcread		- read nfc tag NOARG"
	show "nfcwrite	- write keys comma separated on a tag 1ARG"
	show "nfcaddkey	- Add key ton a tag 2ARG"
	show "nfcsetkey	- Change a key value on a tag 2ARG"
	show "nfcdelkey	- Delete a key on a tag 2ARG"
	show "nfcobfuscate	- obsfuscate tag NOARG"
	show "nfccopy		- copy nfc tag NOARG"
	show "nfccopyraw	- copy nfc tag with low level NOARG"
	show "nfcclear	- clear nfc tag NOARG"
	show "nfczfs		- decypher ZFS volumes NOARG"
	show "nfcmount	- mount nfc card as a volume NOARG"
	show "nfcunmount	- unmount nfc card NOARG"
	show ""
	show "*tomail & tosignal, send to mail or to signal messenger the result of the command"
	exit 2
}

help_ctcreate()
{
	show "Usage: admin ctcreate [ -i|--id NODEFAULTVALUE ] [ -n|--name animal-generated ] [ -N|--net [ $(getnetsopt) ] [ -m|--mem 2048 ] [ -c|--core 1] [ -v|--vol 32 ] [ -o|--os alpine ] [ -p|--privilegied ] [ -d|--docker ] [ -B|--boot ] [ -b|--bootorder 30 ] [ -h ] [ -g|--git NODEFAULTVALUE ] [ -P|--params NODEFAULTVALUE ] [ -M|--mapping NODEFAULTVALUE ] [ -I|--ip NODEFAULTVALUE ]" 1
	show ""
	show "Create a container in proxmox"
	show ""
        show "name     : generated automaticly if not given"
        show "net      : multiple choice concatening short name"
	shownetconfig
        show "os       : unique choice"
	show "  debian"
	show "  alpine"
	show "  ubuntu"
        show "mem      : in MB"
        show "vol      : in GB"
        show "git      : path to git url for cloning data to /srv"
        show "params   : params to pass to /srv/install.sh script if exists"
        show "mapping  : map /srv container path to host path specified, replace ZFS auto mapping"
	show "ip       : give preferential ip when selecting a network"
	exit 2
}

help_ctdelete()
{
	show "Usage: admin ctdelete [ -i|--id name ] [ -y|--yes ] [ -d|--data ]" 1
	show ""
	show "Delete a container in proxmox"
	show ""
        show "id       : id of container"
        show "data     : delete also server data"
	show "yes      : force deletion without question"
	exit 2
}

help_rclone()
{
	show "Usage: admin rclone [ sync|view|check ]" 1
	show ""
	show "Use the rclone backend to make cloud mirror operations"
	show ""
        show "sync     : perform a sync with the cloud"
        show "view     : view interactivly server data"
	show "check    : check integrity of distant data"
	exit 2
}

help_restic()
{
	show "Usage: admin restic [ init|snapshots|check|backup|prune|remove ]" 1
	show ""
	show "Use the restic backend to make some cloud backup operations"
	show ""
        show "init      : initialize the data storage on cloud"
        show "snapshots : view snapshots stored on cloud"
	show "check     : check integrity of distant data"
	show "backup    : perform a backup on cloud"
	show "prune     : purge unused data on cloud storage"
	show "remove    : remove a snapshot store on cloud"
	exit 2
}

resticapp()
{
	if [ -z "$1" ]; then
		help_restic
	fi
	RCLONE_CONFIG="/mnt/usb/rclone/rclone.conf"
	RESTIC_PASSWORD="Biloijkjhkjh876n"
	export RCLONE_CONFIG
	export RESTIC_PASSWORD
	case "$1" in
	init)
		show "Initializing..." 1
		echo "********* Initialiazing *************" >> /var/log/restic.log
		date >> /var/log/restc.log
		rclonemount $restic_path
		restic init -r rclone:crypt:/ | tee -a /var/log/restic.log
		echo "***********************************" >> /var/log/restic.log
	;;
	snapshots)
		show "View..." 1
		rclonemount $restic_path
		restic snapshots -r rclone:crypt:/
	;;
	check)
		show "Check..." 1
		echo "************** Check **************" >> /var/log/restic.log
		date >> /var/log/restic.log
		rclonemount $restic_path
		restic check --read-data -r rclone:crypt:/ | tee -a /var/log/restic.log
		echo "***********************************" >> /var/log/restic.log
	;;
	prune)
		show "Cleaning..." 1
		echo "************** Cleaning **************" >> /var/log/restic.log
		date >> /var/log/restic.log
		rclonemount $restic_path
		restic prune -r rclone:crypt:/ | tee -a /var/log/restic.log
		echo "***********************************" >> /var/log/restic.log
	;;
	remove)
		show "Removing..." 1
		echo "************** Removing **************" >> /var/log/restic.log
		date >> /var/log/restic.log
		rclonemount $restic_path
		restic forget $2 -r rclone:crypt:/ | tee -a /var/log/restic.log
		echo "***********************************" >> /var/log/restic.log
		;;
        backup)
                show "Backing up..." 1
                echo "************** Backup **************" >> /var/log/restic.log
                date >> /var/log/restic.log
                rclonemount $restic_path
                while read src; do
                        dstemp=$(basename "${src^}")
                        dst=${dstemp^}
                        show "$src => $dst"
                        echo "$src => $dst" >> /var/log/restic.log
			restic backup $src -r rclone:crypt:/ --verbose=2 --exclude ".zfs/**" --tag admin_command|tee -a /var/log/restic.log
			restic forget -r rclone:crypt:/ --tag admin_command --keep-monthly=$keep_monthly --keep-weekly=$keep_weekly --keep-daily=$keep_daily
                done < <(echo "$rclone_vols"|tr "," "\n")
                echo "***********************************" >> /var/log/restic.log
        ;;
	*)
	help_restic
	;;
	esac
	nfcunmount
}

rcloneapp()
{
	if [ -z "$1" ]; then
		help_rclone
	fi
	case "$1" in
	sync)
		show "Synchronize..." 1
		echo "********* Synchonize *************" >> /var/log/rclone.log
		date >> /var/log/rclone.log
		rclonemount $rclone_path
		while read src; do
			dstemp=$(basename "${src^}")
			dst=${dstemp^}
			show "$src => $dst"
			echo "$src => $dst" >> /var/log/rclone.log
			rclone --config /mnt/usb/rclone/rclone.conf sync -c -P --links --checkers=20 --low-level-retries=10 --retries=10 --retries-sleep=1s --transfers=20 --delete-excluded --exclude ".zfs/**" $src crypt:/${dst}/  2>&1 | tee -a /var/log/rclone.log
		done < <(echo "$rclone_vols"|tr "," "\n")
		echo "***********************************" >> /var/log/rclone.log
	;;
	view)
		show "View..." 1
		rclonemount $rclone_path	
		rclone --config /mnt/usb/rclone/rclone.conf ncdu crypt:
	;;
	check)
		show "Check..." 1
		echo "************** Check **************" >> /var/log/rclone.log
		date >> /var/log/rclone.log
		rclonemount $rclone_path	
		while read src; do
			dstemp=$(basename "${src^}")
			dst=${dstemp^}
			show "$src => $dst"
			echo "$src => $dst" >> /var/log/rclone.log
			rclone --config /mnt/usb/rclone/rclone.conf check -c -P --differ /var/log/differ_${dst}.log --links --checkers=20 --low-level-retries=10 --retries=10 --retries-sleep=1s --transfers=20 --exclude ".zfs/**" $src crypt:/${dst}/  2>&1 | tee -a /var/log/rclone.log
		done < <(echo "$rclone_vols"|tr "," "\n")
		echo "***********************************" >> /var/log/rclone.log
	;;
	*)
	help_rclone
	;;
	esac
	nfcunmount
}

ctreinstall()
{
	show "Get informations about last installation" 1
	id=$1
	shift
	newparams="$@"
	if [ "$id" == "" ]; then
		show "No id is specified" ERR
		exit
	fi
	pct start $id
	volume="vol-$id"
	cmdline=$(cat $servermount/$volume/install/args)
	git=$(echo "$cmdline"|sed 's/^.*-g \([^ ]*\).*$/\1/')
	if [ "$git" == "" ]; then
		git=$(echo "$cmdline"|sed 's/^.*--git \([^ ]*\).*$/\1/')
	fi
	params=$(echo "$cmdline"|sed 's/^.*-P \([^ ]*\).*$/\1/')
	if [ "$params" == "" ]; then
		params=$(echo "$cmdline"|sed 's/^.*--params \([^ ]*\).*$/\1/')
		cmdline=$(echo "$cmdline"|sed 's/--params *[^ ]*//g')	
	else
		cmdline=$(echo "$cmdline"|sed 's/-P *[^ ]*//g')	
	fi
	cmdline=$(echo "$cmdline -P $newparams"|sed 's/  */ /g')
	ALLARGS="admin $cmdline"
	show "Last parameters: $params"
	show "New parameters : $newparams"
	show "git repository : $git"
	show "Command line   : $cmdline"
	read -p "Reinstall with this parameters ? [y/n]" answer
	if [ "$answer" == "y" ]; then
		if [ "$git" != "" ]; then
			echo  "rm -rf /srv/install && mkdir -p /srv/install && git clone $git /srv/install && echo \"$ALLARGS\" > /srv/install/args"|pct enter $id
		fi
		allparams=$(echo "$newparams"|tr "," " ")
		afile=$(pct exec $id -- /bin/bash -c "ls /srv/install"|grep "install.sh")
        	if [ "$afile" != "" ]; then
                	pct exec $id -- /bin/bash -c "chmod 755 /srv/install/install.sh && /srv/install/install.sh $allparams"
        	fi
	fi
}

ctcreate()
{
	SHORT=i:,n:,N:,m:,c:,v:,o:,b:,B,g:,p,d,h,P:,I:,M:
	LONG=id:,name:,net:,mem:,core:,vol:,os:,bootorder:,boot,git:,privileged,docker,help,params:,ip:,mapping:
	OPTS=$(getopt -a -n ctcreate --options $SHORT --longoptions $LONG -- "$@")

	VALID_ARGUMENTS=$# 

	if [ "$VALID_ARGUMENTS" -eq 0 ]; then
  		help_ctcreate
	fi

	eval set -- "$OPTS"
	unprivileged="1"
	bootorder=30
	keyctl="1"
	nesting="1"
	fuse="1"
	boot="0"
	git=""
	params=""
	mapping=""
	ip=""
	lastid=""

	while :
	do
  	case "$1" in
    		-d | --docker )
      		docker="1"
      		keyctl="1"
      		nesting="1"
      		fuse="1"
      		shift
      		;;
    		-p | --privileged )
      		unprivileged="0"
      		shift
		;;
    		-B | --boot )
      		boot="1"
      		shift
      		;;
    		-i | --id )
      		lastid="$(($2))"
      		shift 2
      		;;
    		-b | --bootorder )
      		bootorder="$(($2))"
      		shift 2
      		;;
    		-o | --os )
      		choose="${2,,}"
      		case "$choose" in
      			debian)
      			os=$choose
      			files=$debian
      			;;
      			ubuntu)
      			os=$choose
      			files=$ubuntu
      			;;
      			alpine)
      			os=$choose
      			files=$alpine
      			;;
      		esac
      		shift 2
      		;;
    		-v | --vol )
      		vol="$(($2))"
      		shift 2
      		;;
    		-g | --git )
      		git="${2}"
      		shift 2
      		;;
    		-I | --ip )
      		ip="${2,,}"
      		shift 2
      		;;
    		-M | --mapping )
      		mapping="${2}"
      		shift 2
      		;;
    		-P | --params )
      		params=$(echo "${2}"|tr "," " ")
      		shift 2
      		;;
    		-c | --core )
      		core="$(($2))"
      		shift 2
      		;;
    		-m | --mem )
      		mem="$(($2))"
      		shift 2
      		;;
    		-n | --name )
      		name="${2,,}"
      		shift 2
      		;;
    		-N | --net )
		select=$(getnets)
		net=$(echo "${2,,}"|sed "s/[^$select]*//g"|sed -f <(printf 's/%s//2g\n' {a..z}))
      		shift 2
      		;;
    		-h | --help)
      		help_ctcreate
      		;;
    		--)
      		shift;
      		break
      		;;
    		*)
      		show "Unexpected option: $1" ERR
      		help
      		;;
  	esac
	done

	if [ -z "$name" ]; then
		name=$(genname)
	fi
	if [ -z "$mem" ]; then
		mem="2048"
	fi
	if [ -z "$core" ]; then
		core="1"
	fi
	if [ -z "$vol" ]; then
		vol="32"
	fi
	if [ -z "$os" ]; then
		os="alpine"
      		files=$alpine
	fi
	if [ -z "$lastid" ]; then
		lastid=$(lastid)
	fi

	volume="vol-$lastid"

	#echo -en "name:\t$name\nnet:\t$net\nmem:\t$mem\ncore:\t$core\nvol:\t$vol\nos:\t$os\nboot:\t$boot\nbootorder:\t$bootorder\nunprivileged:\t$unprivileged\ndocker:\t$docker\nlastid:\t$lastid\nsearch:\t$search\nnesting:\t$nesting\nkeyctl:\t$keyctl\nvolume:\t$volume\nip:\t$ip\n"

	if [ "$docker" == "1" ]; then
		if [ "$os" != "alpine" ]; then
			show "Paramètre incohérent: Alpine sous Docker. Retirer Docker ou choisissez Alpine" ERR
			exit
		fi
	fi
	netconfig $net $ip
exit
	passwd=$(cat /root/.passwd)
	allpass="echo $passwd"
	pass=$(eval "$allpass")
	zfscreate $volume
	search=$(getsearchdomain)
	echo pct create $lastid /var/lib/vz/template/cache/$files \
    	--arch amd64 \
    	--ostype $os \
    	--hostname "$name" \
    	--cores $core \
    	--memory $mem \
    	--swap 0 \
    	--storage local-zfs \
    	--password "$pass" \
    	--nameserver $dns \
    	--onboot $boot \
    	--startup "order=$bootorder" \
    	--tags AUTO \
    	--hookscript local:snippets/hookscript.pl \
    	--unprivileged $unprivileged \
    	--searchdomain $search \
    	--description "Autogenerated container $name:$lastid" \
    	--features keyctl=$keyctl,fuse=$fuse,nesting=$nesting \
    	--mp0 $servermount/$volume,mp=/srv \
    	--rootfs local-zfs:$vol \
    	$(netconfig $net $ip) \
	$(volconfig $mapping)
	if [ "$?" -gt 0 ]; then
		show "Error when creating container" ERR
		exit
	fi
	if [ "$unprivileged" == "1" ]; then
		cat << EOF >> /etc/pve/local/lxc/$lastid.conf
lxc.idmap: u 0 100000 1002
lxc.idmap: g 0 100000 1002
lxc.idmap: u 1002 1002 1
lxc.idmap: g 1002 1002 1
lxc.idmap: u 1003 101003 24
lxc.idmap: g 1003 101003 24
lxc.idmap: u 1027 1027 1
lxc.idmap: g 1027 1027 1
lxc.idmap: u 1028 1028 1
lxc.idmap: g 1028 1028 1
lxc.idmap: u 1029 1029 1
lxc.idmap: g 1029 1029 1
lxc.idmap: u 1030 101030 1
lxc.idmap: g 1030 1030 1
lxc.idmap: u 1031 101031 64505
lxc.idmap: g 1031 101031 64505
EOF
	fi
	sleep 30
	pct start $lastid
	sleep 40
	if [ "$os" == "alpine" ]; then
		echo -en "echo https://mirrors.ircam.fr/pub/alpine/v3.15/main > /etc/apk/repositories \n\
echo https://mirrors.ircam.fr/pub/alpine/v3.15/community >> /etc/apk/repositories \n\
apk update \n\
apk add attr bind-tools tcpdump curl shadow tzdata bash git\n\
echo 'Europe/Paris' >  /etc/timezone \n\
cp /usr/share/zoneinfo/Europe/Paris /etc/localtime \n\
$customize\n"|pct enter $lastid
	fi
	if [ "$docker" == "1" ]; then
		echo -en "apk add fuse-overlayfs docker docker-compose \n\
rc-update add docker boot \n\
service docker start \n\
docker network create proxy \n\
rc-update add docker \n"|pct enter $lastid
	fi
	if [ "$git" != "" ]; then
		echo  "mkdir /srv/install && git clone $git /srv/install && echo \"$ALLARGS\" > /srv/install/args"|pct enter $lastid
	fi
	allparams=$(echo "$params"|tr "," " ")
	afile=$(pct exec $lastid -- /bin/bash -c "ls /srv/install"|grep "install.sh")
        if [ "$afile" != "" ]; then
                pct exec $lastid -- /bin/bash -c "chmod 755 /srv/install/install.sh && /srv/install/install.sh $allparams"
        fi
}

ctdelete()
{
	SHORT=d,y,h,i:
        LONG=yes,data,help,id:
        OPTS=$(getopt -a -n ctdelete --options $SHORT --longoptions $LONG -- "$@")

        VALID_ARGUMENTS=$#

        if [ "$VALID_ARGUMENTS" -eq 0 ]; then
                help_ctdelete
        fi

	eval set -- "$OPTS"
	data="0"
	yes="0"
        while :
        do
        case "$1" in
                -d | --data )
                data="1"
                shift
                ;;
                -y | --yes )
                yes="1"
                shift
                ;;
                -h | --help )
		help_ctdelete
                ;;
                -i | --id )
                id="$(($2))"
                shift 2
                ;;
		--)
                shift;
                break
                ;;
	esac
	done
	if [ -z "$id" ]; then
		show "Need an ID !!" ERR
		exit 2
	fi
	show "CT ID: $id" 1
	if [ "$yes" == "1" ]; then
		answer=$id
	else
		read -r -p "Really want to delete ? Give ID again:" answer
	fi
	if [ "$answer" == "$id" ]; then
        	pct shutdown $id
        	pct stop $id
        	pct destroy $id --destroy-unreferenced-disks 1 --force 1 --purge 1
		if [ "$data" == "1" ]; then
			answer=$id
		else	
        		read -r -p "Delete serveur data ? Give ID again:" answer
		fi
        	if [ "$answer" == "$id" ]; then
                	zfsdelete "vol-$id"
		else
        		show "Deleting zfs volume cancelled"
        	fi
	else
        	show "Deleting container cancelled"
	fi
}

disktemp()
{
	temp=$(/usr/sbin/hddtemp $(ls /dev/sd?) -n|grep -v "sensor"|sort -nr|xargs echo)
	high=$(echo "$temp"| cut -d ' ' -f1)
	if [ "$high" -gt "40" ]; then
		alert
	fi
	show "$temp"
}

diskhealth()
{
	health=$(/usr/sbin/zpool status -pPL|grep "ONLINE"|grep "/dev"|sed 's/^.*\///g'|tr -s ' '|xargs echo)
	show "$health"
}

iommugroups()
{
	shopt -s nullglob
	for d in /sys/kernel/iommu_groups/*/devices/*; do
    		n=${d#*/iommu_groups/*}; n=${n%%/*}
    		printf 'IOMMU Group %s ' "$n"
    		lspci -nns "${d##*/}"
	done;
}

ctkill()
{
	if [ -z "$1" ]; then
		show "Usage: admin ctkill id" 1
		show ""
		show "Kill a container by using the id"
		exit
	fi
	pct unlock $1
	ls -l "/run/lock/lxc"
	rm -rf "/run/lock/lcx/pve-config-$1.lock"
	pct unlock $1
	pct stop $1
	lxc-stop --name $1
	ls -l "/run/lock/lxc"
}

vmkill()
{
	if [ -z "$1" ]; then
		show "Usage: admin vmkill id" 1
		show ""
		show "Kill a VM by using the id"
		exit
	fi
	if [ -z "$1" ]; then
		exit
	fi
	qm unlock $1
	ls -l "/run/lock/qemu-server"
	rm -rf "/run/lock/qemu-server/lock-$1.conf"
	qm unlock $1
	qm stop $1
	ls -l "/run/lock/qemu-server"
}

ctkillall()
{
	show "Force stop gracefully" 1
	ACTIVES=$(lxc-ls --active -1)
	for ACTIVE in $ACTIVES; do
        	show "  - $ACTIVE"
        	lxc-stop $ACTIVE -W
	done
	sleep 60
	show "Force stop now" 1
	ACTIVES=$(lxc-ls --active -1)
	for ACTIVE in $ACTIVES; do
        	show "  - $ACTIVE"
        	lxc-stop $ACTIVE -k -W
	done
	show "Active containers" 1
	lxc-ls --active -1
}

tosignal()
{
	/usr/bin/curl -X POST -k -H "Content-Type: application/json" "https://$signal_host/v2/send" -d "{\"message\": \"$(hostname): temp: $ALLSTR\", \"number\": \"$signal_num\", \"recipients\": [ \"$signal_num\" ]}"
}

tomail()
{
	rm -rf /tmp/rapport*
	echo "$ALLSTR" 1> /tmp/rapport.html 2>/dev/null
	sjt="[NAS] Rapport"
	enc="application/pgp-encrypted"
	pms="Version: 1"
	mime-construct --subpart --file-auto /tmp/rapport.html|gpg --trust-model always -ea -r "${src}" -r "${dst}"|mime-construct --to "${dst}" --subject "${sjt}" --multipart "multipart/encrypted; protocol=\"${enc}\"" --type "${enc}" --string "${pms}" --type application/octet-stream --file - --output|s-nail -t -s "${sjt}" -S from="${src}" ${dst}
}

rapport()
{
	show '<html> <head> <title>Rapport NAS</title> <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"> </head> <style type="text/css">body{ background-color: #000; }.white{ color: #FFF; }</style><body><pre class="white">'
	name=$(hostname -A)
	title=$(figlet ${name})
	date=$(date)
	show "$title\nDate rapport: ${date}"
	show "----=< INFORMATIONS GENERALES --------"
	hostname=$(hostname)
	kernel=$(uname -r)
	info1=$(echo -en "Nom d'hote:|${hostname}|Noyau:|${kernel}"|column -s"|" -t)
	system=$(cat /etc/*-release|grep PRETTY|cut -d"=" -f2|tr -d '"')
	info2=$(echo -en "Systeme:|${system}"|column -s"|" -t)
	show "$info1\n$info2"
	show "---=< USAGE                   --------"
	model=$(cat /proc/cpuinfo|grep "model name"|uniq -d|cut -d":" -f2|sed 's/^\s*//')
	usage1=$(echo -en "Modele:|${model}"|column -s"|" -t)
	uptime=$(uptime -p)
	uptime2=$(uptime | cut -d":" -f5)
	usage2=$(echo -en "Fonctionnement:|${uptime}"|column -s"|" -t)
	proc=$(ls -d /proc/[0-9]* | wc -w)
	usage3=$(echo -en "Processus:|${proc}|Charge:|${uptime2}"|column -s"|" -t)
	show "$usage1\n$usage2\n$usage3"
	show "---=< LXC                     --------"
	string="ID,NAME,STATUS,PID,IPS,PING"
	while read container; do
        	infos=$(lxc-info $container)
		id=$(echo "$infos"|grep "Name:"|sed 's/Name: *//g')
		name=$(cat /etc/pve/lxc/$id.conf |grep "hostname"|sed 's/hostname: //g')
		state=$(echo "$infos"|grep "State:"|sed 's/State: *//g')
		pid=$(echo "$infos"|grep "PID:"|sed 's/PID: *//g')
		ips=$(echo "$infos"|grep "IP:"|sed 's/IP: *//g')
		pings=""
		ipstr=""
		while read ip; do
			if [[ "$ip" == "172."* ]]; then
				continue
			fi
			if [[ "$ip" == "" ]]; then
				continue
			fi
        		ping=$(timeout 0.5 ping -c1 -n $ip|grep rtt|cut -d"=" -f2|cut -d"/" -f2 2>/dev/null)
        		if [ -z "$ping" ]; then
                		pings="$pings NON"
        		else
                		pings="$pings ${ping}ms"
			fi
			ipstr="$ipstr $ip"
        	done < <(echo "$ips")
        	line="$id,$name,$state,$pid,$ipstr,$pings"
        	string="$string\n$line"
	done < <(lxc-ls -1)
        lxc=$(echo -en "${string}"|column -t -s",")
	show "$lxc"
	show "---=< MEMOIRE                     --------"
	total=$(cat /proc/meminfo|grep "MemTotal"|cut -d":" -f2|sed 's/^\s*//')
	free=$(cat /proc/meminfo|grep "MemFree"|cut -d":" -f2|sed 's/^\s*//')
	buffer=$(cat /proc/meminfo|grep "Buffers"|cut -d":" -f2|sed 's/^\s*//')
	show "Memoire totale: $total\nMemoire libre: $free\nMemoire buffer: $buffer"
	show "---=< SYSTEME DE FICHIER          --------"
	zfs=$(/usr/sbin/zfs list -d1|grep -v "none")
	show "$zfs"
	NB=$(lsscsi|grep "disk"|wc -l)
	string_SATA="PRODUCT,SERIAL,SANTE,REALLOC,EVENTS,SEEKERROR,PENDING,INCORRECTIBLE,HEURES,TEMP"
	string_SAS="PRODUCT,SERIAL,SANTE,HEURES,TEMP,ENDURANCE,READ,WRITE,VERIFY"
	while [ "$NB" != "0" ]; do
	NB=$((NB-1))
	data=$(/usr/sbin/smartctl -a /dev/sda -d cciss,$NB)
	SAS=$(echo "$data"|grep "Transport"|grep "SAS")
	if [ "${SAS}" == "" ]; then
  		product=$(echo "$data"|grep "Device Model"|cut -d":" -f2|sed 's/^\s*//')
  		serial=$(echo "$data"|grep "Serial Number"|cut -d":" -f2|sed 's/^\s*//')
  		health=$(echo "$data"|grep "overall-health"|cut -d":" -f2|sed 's/^\s*//')
  		realloc=$(echo "$data"|awk '/Reallocated_Sector_Ct/ { print $NF}')
  		errors=$(echo "$data"|awk '/Reallocated_Event_Count/ { print $NF}')
  		timeout=$(echo "$data"|awk '/Seek_Error_Rate/ { print $NF}')
  		pending=$(echo "$data"|awk '/Current_Pending_Sector/ { print $NF}')
  		uncorrect=$(echo "$data"|awk '/Offline_Uncorrectable/ { print $NF}')
  		hours=$(echo "$data"|awk '/Power_On_Hours/ { print $NF}')
  		temp=$(echo "$data"|sed 's/(.*)//g'|awk '/Temperature_Celsius/ { print $NF}')
  		if [ -z "$realloc" ]; then
        		realloc="/"
  		fi
  		if [ -z "$errors" ]; then
        		errors="/"
  		fi
  		if [ -z "$timeout" ]; then
        		timeout="/"
  		fi
  		if [ -z "$pending" ]; then
        		pending="/"
  		fi
  		if [ -z "$uncorrect" ]; then
        		uncorrect="/"
  		fi
  		string_SATA="$string_SATA\n${product},${serial},${health},${realloc},${errors},${timeout},${pending},${uncorrect},${hours},${temp}"
	else
  		product=$(echo "$data"|grep "Product"|cut -d":" -f2|sed 's/^\s*//')
  		serial=$(echo "$data"|grep "Serial number"|cut -d":" -f2|sed 's/^\s*//')
  		health=$(echo "${data}"|awk '/SMART Health Status/ {print $NF}')
  		temp=$(echo "${data}"|sed 's/C$//g'|awk '/Current Drive Temperature/ {print $NF}')
  		hours=$(echo "${data}"|awk '/Accumulated power on time/ {print $NF}')
  		read=$(echo "${data}"|awk '/read:/ {print $NF}')
  		write=$(echo "${data}"|awk '/write:/ {print $NF}')
  		verify=$(echo "${data}"|awk '/verify:/ {print $NF}')
  		end=$(echo "${data}"|awk '/Percentage used endurance indicator/ {print $NF}'|tr -d '%')
  		if [ -z "$end" ]; then
        		end="/"
  		fi
  		string_SAS="$string_SAS\n${product},${serial},${health},${hours},${temp},${end},${read},${write},${verify}"
	fi
	done
	sata=$(echo -en "$string_SATA"|column -s"," -t)
	sas=$(echo -en "$string_SAS"|column -s"," -t)
	show "---=< DISQUES SATA                --------"
	show "$sata"
	show "---=< DISQUES SAS                 --------"
	show "$sas"
	show "---=< TEMPERATURES DES DISQUES    --------"
	temp=$(/usr/sbin/hddtemp $(ls /dev/sd?) -n|grep -v "sensor"|sort -nr|xargs echo)
	show "$temp"
	show "---=< RESEAU                      --------"
	show "Acces google:\t\t"
	ping=$(timeout 0.5 ping -c1 -n 8.8.8.8|grep rtt|cut -d"=" -f2|cut -d"/" -f2 2>/dev/null)
	if [ -z "$ping" ]; then
        	show "NON"
	else
        	show "${ping}ms (8.8.8.8)"
	fi
	show "Acces routeur:\t\t"
	route=$(timeout 0.5 ip route | awk '/default/ { print $3 }')
	ping=$(timeout 0.5 ping -c1 -n $route|grep rtt|cut -d"=" -f2|cut -d"/" -f2 2>/dev/null)
	if [ -z "$ping" ]; then
        	show "NON"
	else
        	show "${ping}ms ($route)"
	fi
	show "---=< ZFS POOL                    --------"
	string="NOM ETAT LECTURE ECRITURE CKSUM"
	pool=$(/usr/sbin/zpool status -pPL|grep "ONLINE"|grep "/dev"|sed 's/^.*\///g'|tr -s ' ')
	all="$string\n$pool"
	pool=$(echo -en "$all"|column -t)
	show "$pool"
	show "---=< ZFS STATS                   --------"
	stat=$(/usr/sbin/zpool iostat|grep -v "-"|grep -v "capacity")
	show "$stat"
	show "---=< ZFS DUPLICA                 --------"
	if [ ! -z "$dup1" ]; then
		sync=$(/usr/sbin/zfs list $dup1 -t snapshot|grep "syncoid")
		show "$sync"
	fi
	if [ ! -z "$dup2" ]; then
		sync=$(/usr/sbin/zfs list $dup2 -t snapshot|grep "syncoid")
		show "$sync"
	fi
	show "---=< ZFS SNAPSHOT                --------"
	string="PERIODICITE NOM TAILLE"
	snap=`/usr/sbin/zfs list $datapool -t snapshot -o name,refer|grep -v "NAME"|grep frequently|tail -n1`
	string="$string\n15MIN ${snap}"
	snap=`/usr/sbin/zfs list $datapool -t snapshot -o name,refer|grep -v "NAME"|grep hourly|tail -n1`
	string="$string\nHEURE ${snap}"
	snap=`/usr/sbin/zfs list $datapool -t snapshot -o name,refer|grep -v "NAME"|grep daily|tail -n1`
	string="$string\nJOUR ${snap}"
	snap=`/usr/sbin/zfs list $datapool -t snapshot -o name,refer|grep -v "NAME"|grep weekly|tail -n1`
	string="$string\nSEMAINE ${snap}"
	snap=`/usr/sbin/zfs list $datapool -t snapshot -o name,refer|grep -v "NAME"|grep monthly|tail -n1`
	string="$string\nMOIS ${snap}"
	allsnap=$(echo -en "$string"|column -t)
	show "$allsnap"
	if [ ! -z "$status" ]; then
		show "---=< ONDULEUR                    --------"
		show "charge:\t\t${load}"
		show "status:\t\t${status}"
	fi
	show "</pre> <body> </html>"
}

startpv()
{
	show "Mount ZFS volumes" 1
	zfs mount -a
	ls /srv/*
	show "Run Proxmox services" 1
	systemctl start pve-cluster
	systemctl start pvedaemon
	systemctl start pvestatd
	systemctl start pveproxy
}

stoppv()
{
	ctkillall
	show "Stop Proxmox Services" 1
	killall -9 corosync
	systemctl stop pve-cluster
	systemctl stop pvedaemon
	systemctl stop pvestatd
	systemctl stop pveproxy
	show "Unmount ZFS volumes" 1
	zfs umount -a
}
if [ ! -f "/usr/bin/s-nail" ]; then
	install
fi
command=$1
shift
lastarg=${*: -1:1}
if [ "$lastarg" == "tomail" ]; then
	set -- "${@:1:$(($#-1))}"
	tomail="1";
fi
if [ "$lastarg" == "tosignal" ]; then
	set -- "${@:1:$(($#-1))}"
	tosignal="1";
fi
case "$command" in
ctcreate)
	ctcreate $@
      	;;
ctreinstall)
	ctreinstall $@
      	;;
ctunprivilege)
	ctunprivilege $@
      	;;
ctdelete)
	ctdelete $@
      	;;
ctkill)
	ctkill $1
      	;;
ctkillall)
	ctkillall
      	;;
vmkill)
	vmkill $1
      	;;
disktemp)
	disktemp 
      	;;
diskhealth)
	diskhealth
      	;;
rapport)
	rapport
      	;;
restic)
	resticapp $1 $2
	;;
rclone)
	rcloneapp $1
      	;;
close)
	nfcunmount
	;;
stop)
	stoppv
      	;;
start)
	startpv
      	;;
iommugroups)
	iommugroups
      	;;
nfcinstall)
	nfcinstall
	;;
nfcuninstall)
	nfcuninstall
      	;;
nfcclear)
      	nfcclear
	;;
nfcread)
      	nfcread
	;;
nfcreadraw)
      	nfcreadraw
	;;
nfcwrite)
      	nfcwrite $@
	;;
nfcsetkey)
      	nfcsetkey $@
	;;
nfcaddkey)
      	nfcaddkey $@
	;;
nfcdelkey)
      	nfcdelkey $@
	;;
nfccopy)
	nfccopy
      	;;
nfccopyraw)
	nfccopyraw
      	;;
nfczfs)
	nfczfs
      	;;
nfcobfuscate)
	nfcobfuscate
	;;
nfcmount)
	nfcmount
	;;
nfcunmount)
	nfcunmount
	;;
install)
	install
	;;
upgrade)
	upgrade
	;;
*)
	help
	;;
esac
ALLSTR=$(echo -en "$ALLSTR")
if [ "$tosignal" == "1" ]; then
	tosignal
	show "Sended by signal at $signal_num" 1
fi
if [ "$tomail" == "1" ]; then
	tomail
	show "Sended by mail at $dst" 1
fi
#show "$ALLSTR"
